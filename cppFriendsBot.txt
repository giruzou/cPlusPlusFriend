すごーい! 百人一首の決まり字は、コンピュータ以前に発明された、multi level indexなんだね!
ロンドンでお店に"If this till is unattended, please pay at the ground floor."と書いてあるのをみました(この文が間違っているならそれは私のせいです)。このtillはレジのことですが、自動翻訳が大変そうです。
やめるのだフェネック! ドキュメントがなくてもソースコード見れば分かる、ってそんな訳ないのだ! スレッドセーフとか再入不可とか計算量とか性能についてソースコードからは読み取れないのだ! #やめるのだフェネックで学ぶC++
正常なソフトウェアプロジェクトではテストをするが(Programmers test their code)、そうでないプロジェクトでは開発者が試される(Legacy code tests programmers)。
やめるのだフェネック! テキストエディタのフォントはデフォルトではなく、{I,l,1,|}, {0,O}の区別がつきやすいフォントを使うのだ! NTEmacsなら、Consolas + Migu 1Mとか使うのだ!  #やめるのだフェネックで学ぶC++
やめるのだフェネック! コレクションの最大要素と最小要素を別々に求めるのは二度手間なのだ! std::minmax_elementを使うのだ! #やめるのだフェネックで学ぶC++
マルチタスクで仕事をこなすのが出来る人と断言する前に、stop the world GCよりconcurrent GCの方がスループットが低いことを思い出して欲しいのです。スループット(速さ)とレイテンシ(早さ)は別の尺度であり、しばしばトレードオフなのです。
やめるのだフェネック! 引いて負なら0にするという飽和演算は、素直にsaturated sub(traction)と書いてほしいのだ! First grade subtraction(小学一年生の引き算)は正しいけど通じないのだ! #やめるのだフェネックで学ぶC++
「ではお前たち、定義を見つけてくるのです。不完全型でないのを見つけてくるのですよ。」「宣言だけでコンパイルするのはだめなのか? とりあえず参照はできるって聞いたよ」「メモリを確保するときにサイズが必要なのです。頭を使うのです。」 #けものフレンズ
やめるのだフェネック! Gitの公式ガイドラインに従うなら、コミットメッセージは命令形(imperative mood)で書いて欲しいのだ! 他のプロジェクトもこうしておけば、英語で迷うことは減るのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 11,12,13番目は、11st, 12nd, 13rdじゃないのだ! 全部thなのだ! 発音すればわかるのだ! #やめるのだフェネックで学ぶC++
曽野綾子著 "無名碑" に、ダム建設について「僕の仕事は一生どんなにいい仕事をしても個人の名前は残らない」とあります。だからこそプログラマにとって、G. Pascal Zachary著 "Showstopper!"(山岡洋一訳 "闘うプログラマー") は重要だと思うのです。
やめるのだフェネック! 変数をどこで使っているかgrepして目視するのは見落としが多いのだ! 変数名を変えてコンパイルして、エラーをあぶり出すのだ! でも変数名をお試しで変えたコードをcommitしちゃ嫌なのだ! #やめるのだフェネックで学ぶC++
プログラミング言語C++ → こんなに刺激が強いなんて → Effectiveシリーズ → おかわりをよこすのです → Modern C++ Design → テンプレートメタプログラミングを駆使してこそのC++なのです #けものフレンズ
やめるのだフェネック! ジョエルテストで11点取れないからって、テストしなかったことにするのはよくないのだ!{\n}https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/
簡潔なコミットログの書き方は、BBC Newsのヘッダラインから学ぶとよいと思います。50文字以内で言いたいことが伝わるのです。
やめるのだフェネック! デバッグで行き詰ったからといって、いきなり人を捕まえて、何が起きているか分からないと言わないで欲しいのだ! コノハ博士とミミちゃん助手のポストカードに話しかけて、状況を整理してから持ってきて欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 素の乱数を作るのにXorshiftを引用するのはいいとしても、std::uniform_int_distributionを自作するのはやめるのだ! うまく作らないと結果に偏りが出てしまうが、簡単には気づかないのだ! #やめるのだフェネックで学ぶC++
市町村合併で新しく生まれた市町村名は、往々にしてどの元の地名でもないものになるようです(要出典)。さてkuina.chのchは、ISO 3166-1にある通りConfœderatio Helveticaの略ですので、こういう名前の付け方は昔からあるのでしょう。
やめるのだフェネック! 時刻表記のテストケースには、うるう秒も加えるのだ! std::get_timeは"2017-01-01 08:59:60"をちゃんと解析してくれるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! クロスコンパイル環境の開発では、ターゲットでは使えるがホスト(ユニットテスト)では使えないキーワードを、マクロを介して使って欲しいのだ! 直接__forceinlineと書かないで欲しいのだ! #やめるのだフェネックで学ぶC++
数字を英語でどう読むのか、というのは未だによく分からないことがあります。Nikkei 225とBoeing 787は、結局どう読むのが正しいのでしょうか(正解が一通りでないとしても)。
やめるのだフェネック! 条件演算子 (expr) ? t : f よりif-elseの方が分かりやすいとか言わないで欲しいのだ! それはconditional move命令に変換することで、分岐予測が外れるペナルティを避ける必要があったのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 手作業で、段落を整形して一行の長さをそろえるのは大変なのだ! EmacsならM-q一発なのだ! (setq-default fill-column 70)で長さを変えられるのだ! #やめるのだフェネックで学ぶC++
Windows付属の電卓は、整数の除算を有理数で行っているようです。1を3で割って0.333...になったのを3倍すると1に戻ります。同じものを作ろうとすると、Boostで有理数を扱う必要があり、doubleで済ますよりもなかなか大変そうです。
やめるのだフェネック! 整数に対するlog2がライブラリにないからって、ループを回すのはイケてないのだ! BSR命令か__builtin_clz()を使うのだ #やめるのだフェネックで学ぶC++
サブカルの「二次元」はdegreeではなくdimensionだから積分できないと聞きました。そのように用語に正確を期すならば、山勘よりもデータを信じて一手を打つのは、digitalではなくpure strategyと呼べばよいのでしょうか?
やめるのだフェネック! RDTSC命令で取得したクロックをそのまま乱数に使うのはやめるのだ! 偶数しか出ないとか、4で割った余りがいつも同じとかいう偏りがあるのだ! #やめるのだフェネックで学ぶC++
英語の単数形と複数形の使い分けは、私にとっては今でも難しいです。さて八甲田山と瀬戸大橋は単複どちらなのでしょうか。八甲田山は複数の峰、瀬戸大橋は複数の橋と高架橋の総称です。
やめるのだフェネック! XMMレジスタを収める配列を確保するのに、reinterpret_castを使ってアラインメントし直すのはめんどくさいのだ! std::aligned_storageを使えば済むのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! memsetが常にmemset関数呼び出しになるとは限らないのだ! clangは短い固定長領域については、mov命令で済ませることがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ifとかforとか無いただの{}を、無駄だからといって削除してはならないのだ! それはブロックスコープで、変数の有効範囲とデストラクタ呼び出しを規定しているのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! プロジェクトの、暦年第一週をてきとーに決めないで欲しいのだ! 例えばISO 8601(一週間は月曜始まり、暦年の第一週=第一木曜日を含む週)にして欲しいのだ! #やめるのだフェネックで学ぶC++
特許事務所と特許明細書を執筆していると、図面をフローチャートで提示されることがあります。プログラムの設計ですと、並行動作のfork-joinはアクティビティ図の方が描きやすいですし、～なら～するのは決定木の方が描きやすいです。弁理士の皆さま、是非ともご検討頂けますでしょうか。
やめるのだフェネック! テストはソフトウェアの完全性を保証するものではないのだ! ソフトウェアの品質が十分でないという帰無仮説をテストで支持しようとして、テストが全部通ったので、帰無仮説を棄却して品質が十分高いとみなすことなのだ。 #やめるのだフェネックで学ぶC++
やめるのだフェネック! C++にfinally節やensure節はないのだ! リソースリークの防止にはRAIIを使うのだ! #やめるのだフェネックで学ぶC++
老齢年金とは、勤労者から引退生活者にお金を移す、と捉えている人が多いと思いますが、正しくは早死にした人から長生きした人へお金を移す制度です。長生きリスクへの対応という意味で、本質的には保険と同じです。リスクという言葉を理解しているかどうかの確認としてちょうどよいでしょう。
やめるのだフェネック! 複数行のコードをとりあえずコメントアウトするのに/* */を使うと、/* */が入れ子になっておかしくなることがあるのだ! #if 0 - #endifにして欲しいのだ! #やめるのだフェネックで学ぶC++
行動経済学は今や必須科目だと思うのですが、同じ事実に対する印象の違いを端的に表す例に「朝三暮四」があります。四週間でできそうなことを三週間でやれと命令したが、一週間遅れたので結局四週間掛かった、というのはまさにこういうことではないでしょうか。
やめるのだフェネック! 「printfを入れたら動いた」とか言っちゃダメなのだ! それはprintfをまたぐ最適化が抑止されたから、volatileではない変数を読みに行くようになっただけなのだ! 忘れずにvolatileをつけるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ヘッダファイルで定義した定数を書き換えるたびにフルビルドが走るのは嫌なのだ! 定数伝搬するつもりがなければ、宣言だけ公開して定義は.cppに入れておけば、定数を変えてもその.cppだけリコンパイルすれば済むのだ! #やめるのだフェネックで学ぶC++
タスクスケジューラは何をしているのか、というのは料理をすれば分かります。ご飯を炊いて、味噌汁を煮て、総菜と果物を盛り付けつつ、魚が黒焦げにならなければ、タスクが時間制約を満たしたと言えるでしょう。中の人は久しく料理をしてないようですが。
やめるのだフェネック! "the dragon book"はドラゴンのフレンズじゃないのだ! "Compilers: Principles, Techniques, and Tools"の通称なのだ! #けものフレンズ #やめるのだフェネックで学ぶC++
やめるのだフェネック! 製品コードの中に直接#ifdef UNITTEST ... #endifと書くのは極力避けたいのだ! そこはdependency injectionを使いたいのだ! #やめるのだフェネックで学ぶC++
CPUへの割り込みは、古典的な教科書では電話に出ること例えられます。なるほどそれはそうですが、ITSとVCSの時代にプログラマが電話で何か訊かれることもないと思うので、もっと現代的なたとえはないでしょうか。
やめるのだフェネック! 長さNの配列を、for(int i=0; i<N; ++i)で回すのはやめるのだ! 配列の長さを増やしたとき、for文を変え忘れるのだ! iが不要ならrange-based forかstd::for_eachを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 割り込みやシグナルやcondition variableは、それらの待ちに入る前に通知される場合に対処する必要があるのだ! そうでないと無限待ちになってしまうことがあるのだ! #やめるのだフェネックで学ぶC++
プロジェクトのクリティカルパスは、期限が守れるかどうかを決めるものであって、難易度とは別の概念です。カレーライスを作るクリティカルパスはご飯を炊くことですが、炊飯器のスイッチを押すのと、玉ねぎの皮をむいて炒めるのと、どちらが難しいかは明らかでしょう。
やめるのだフェネック! 再帰による探索だけでは計算量が多すぎて解が求まらないことがあるのだ! そこは動的計画法を使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 自由関数のシグネチャをgrepで集めると、複数行にわたる宣言と定義が途中で切れてしまうのだ! indentとctagsを使うのだ! #やめるのだフェネックで学ぶC++
マイケル・ジャクソンの"Smooth Criminal"に、立ったまま体を傾けるシーンがありますが、この演技の仕掛け(の改良版)は後に特許になっています(USP 5,255,452)。特許明細書の文章は一般的に固くて読みにくいですが、一度練習として読んでみるとよいかもしれません。
やめるのだフェネック! ヘッダファイルをインクルードする順番が入れ替わるとエラーになるのは困るのだ! 宣言と定義を適切にヘッダファイル群に分割して、依存関係を一方向にそろえるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック!  pthread_cond_waitを直接使うと、spurious wakeup対策が必要なのだ! std::condition_variable::waitを述語付きで使うのだ! #やめるのだフェネックで学ぶC++
映画「プラダを着た悪魔」のセリフ集(スクリーンプレイ・シリーズ)に"jobs that pay the rent"「家賃を払うために(仕方なく)就いた仕事」というセリフがあります。仕事をjobではなくcareerと呼ぶのは、気取っているのではなく真っ当な言い方なのですね。
とある会社では、車のエンジンを分解させて組み立てさせ、モノづくりの苦労を学ばせると聞きます。私の場合は、わざと不具合が混入した疑似コードを渡されてコードを書いたことがあります。仕込まれた問題点をすべて指摘した上で、出題者が意図しない改善点まで挙げればしめたものでしょう。
やめるのだフェネック! 自分の.cから他人の.cにある変数を使いたいからといって、自分の.cにexternを足さないで欲しいのだ! 宣言がint* aで、定義がint[] aだと、a[0]が落ちるのだ! ODR違反とカプセル化の危機なのだ! #やめるのだフェネックで学ぶC++
テキストファイルの数行だけ数字を,で区切るのに、スクリプトを書く必要はないのだ! Emacsのキーボードマクロで書けるのだ!{\n}C-x ( M-f , C-a C-n C-x ) C-u C-x e{\n}アライさんにお任せなのだ!
やめるのだフェネック! 成果物のビルドはmake一発でできて欲しいのだ! それより複雑な手順は、間違った成果物をリリースする元凶なのだ! スモークテストも併せて実行して、結果を報告して欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 短時間で終わる処理の時間測定に、外れ値を入れちゃ嫌なのだ! WindowsやLinuxはマルチタスクOSだから、測定対象以外のプロセスに時間を取られることがあるのだ! #やめるのだフェネックで学ぶC++
大学初等レベルまでという限定付きで、物理と化学は、CとC++のようなものに感じられます。最小限の文法で何でも作るのがC、たくさん覚えると覚えたことが一気につながるのがC++でしょうか。物理学科と化学科の方なら、もっとよい説明ができると思います。
やめるのだフェネック! Makefileはデバッグ不能と諦めないのだ! make --dry-runとか、Makefileに$(foreach v, $(.VARIABLES), $(info $(v) = $($(v)))) とか書くのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! CとC++で共用するヘッダファイルで、空の構造体のサイズが異なることがあるのだ! gccは0 byteでg++は1 byteなのだ! そもそもCで空の構造体は作れないのだ! #やめるのだフェネックで学ぶC++
「いいね」ボタンは英語で"like"なのだそうです。ところでイギリス英語には"lovely"という表現があり、「いいね」の意味を含めてとてもよく使われるそうです。こういうことを少し知っていると、海外旅行や海外出張が楽しくなりそうですね。
やめるのだフェネック! ビルド中のエラーメッセージを英語で出したいからといって、シェルでexport LC_ALL=Cとすると、svnで日本語ファイル名が扱えなくてエラーになるのだ! LC_ALLはMakefileの中で設定するのだ!  #やめるのだフェネックで学ぶC++
やめるのだフェネック! 二つの構造体インスタンスが同値かどうか比較するのに、memcmpは嫌なのだ! 不定値のパディングも比較するので、同値なのに異なると判断することがあるのだ! 比較関数を定義するか、0で埋めておくのだ!  #やめるのだフェネックで学ぶC++
新人プログラマにメンター(mentor)をつける企業はたくさんあると思いますが、メンターに指導される人を何と呼ぶかは、日本語ではあまり聞きません。私は「めんたいこ」だと聞きました。後でわかったことですがこれは冗談で、本当はmenteeです。
やめるのだフェネック! ポインタが壊れていることを、デバッガでちゃんと見つけて欲しいのだ! gdbでinfo registersと打つのだ! 上位ビットがカーネル領域に入っていたり、下位ビットのアラインメントがとれていないのは疑わしいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 今プログラマに話しかけてはダメなのだ! プログラムのタスク切り替えは一瞬でも、プログラマのタスク切り替えは20分掛かるのだ! #やめるのだフェネックで学ぶC++{\n}http://www.bbc.com/capital/story/20170105-open-offices-are-damaging-our-memories
春は中央道/名神高速/東名阪/名二環の集中工事がありますが、集中工事の英語名は"Maintenance Project"だそうです。ソフトウエアならメンテですね。二週間で集中工事を終わらせるために、一年掛けて入念に準備する「プロジェクト」なのでしょう。
やめるのだフェネック! uint32_t = 1を一度に35回シフトして0になったのは、LTOが有効だからだ! LTOがないと8なのだ! Nビット整数を一度にN回以上シフトするのは未定義動作だから直すのだ! #やめるのだフェネックで学ぶC++
大学で教わったこととして、普段から何かしら書き留めておくと長文を書く時の種になる、ということがあります。確かにコードの断片や特許の明細書図面を再利用すると、書く時間を節約できますので、文章はたくさん書くともっと書けるようになるようです。
やめるのだフェネック! ユニットテストのassert_equalに、expectedとactualのどちらを先に書くかは、テストを書く前に確認するのだ! Google TestとCppUnitは期待値が先だが、CUnitは後なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コレクションの最小要素を求める関数を下手に自作すると、要素が空の時INT_MAXが返ってしまうのだ! std::min_elementはイテレータを返すので、空なら第二引数=vector.end()などが返るのだ! #やめるのだフェネックで学ぶC++
相互再帰の最も有名な例は、「旨い物を食べると辛口の菊正宗を飲みたくなる、菊正宗を飲むと旨い物が食べたくなる」だと思います。{\n}http://www.kikumasamune.co.jp/profile/
2の160乗通りのGit commit IDを使い果たすことはできない、と言われても今一つピンとこないと思いますが、アボガドロ定数(2の79乗)より大きいことなら、なんとなく分かっていただけるのではないでしょうか?
やめるのだフェネック! Google Testなどサードパーティーのヘッダファイルは、-Iではなく-isystemでインクルードするのだ! そうしないと対処不能な警告が出て、-Werrorだとビルドが止まってしまうことがあるのだ! #やめるのだフェネックで学ぶC++
ソースコードのcodeは単数形で、codesにすると符号という意味になるようです。しかし野菜はvegetablesで果物はfruitなのはまだわかるのですが、sportとsportsの使い分けが未だにわからないです...
PCのCPU種別を調べるとfamilyが表示されますが、これはx86"家族"ではなく"一族"でしょう。"「家族 family」という概念が現れるのも欧米でも十七世紀にはいってから"、だそうです("日本型近代家族", 千田有紀著, 勁草書房)。
やめるのだフェネック! putcというメンバ関数を作るのはダメなのだ! putcは関数ではなくマクロで実装されていることがあるから、そのときは意味不明なエラーメッセージが出るのだ! #やめるのだフェネックで学ぶC++
例外は、コンストラクタが失敗したことを教えてくれるフレンズなんだね
テンプレートのコンパイルには時間を使うのです。われわれはかしこいので。 #けものフレンズ
"1x歳からの"というキーワード(xは任意の一桁)でググろうとするとたくさん候補が出ますが、その元祖にして最高は「14歳からの哲学」(池田晶子著、トランスビュー刊)でしょう。あの語り掛けるような口調で書くというのが、文筆家の高等技術であり、このbotは氏の足元にも及びません。
やめるのだフェネック! Google Testのユニットテストに共通の初期化は、setupでもsetUpでもなくSetUpなのだ! overrideをつければコンパイラが間違いに気づいてくれるのだ! #やめるのだフェネックで学ぶC++
uint64_tが10進数19桁であることは、std::numeric_limits<uint64_t>::digits10で分かるのです。われわれはかしこいので。constexprで自作して再発明しなくてもよいのです。 #けものフレンズ
やめるのだフェネック! ユニットテストを書くときは、いきなりテストを成功させてはいけないのだ! まず失敗させないと、テストに成功したのか、そのテストを実行していないのか、区別がつかないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ファイルをShift_JISで保存するのはやめるのだ! //コメントが「でゲソ」で終わると、次の行もコメント扱いされて無かったことにされるのだ #やめるのだフェネックで学ぶC++
やめるのだフェネック! 文字列の集合を連結するのに、boost::algorithm::join(lines, " ") で連結しちゃ嫌なのだ! 英語はこれが正しいけど、日本語だと「弁慶がな ぎなたを振り回し」になってしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! pthread_t型の変数を、pthread_createを呼び出す前に初期化はできないのだ! pthread_tの型はopaqueだから、ユーザが設定できる初期値などないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! abi::__cxa_demangleが返したオブジェクトは捨てちゃいけないのだ! freeしないとメモリリークするのだ! 誰がメモリを解放するか、仕様を確認するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! リークするのはメモリだけじゃないのだ! TCP/UDP受信ポートがリークしたら、プロセス終了まで同じ番号のポートが開けなくなるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! C++11なら、解放して欲しいオブジェクトは、生ポインタでなくstd::unique_ptrを返すことを検討するのだ! 生ポインタは所有権を渡さないという意志を示したいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! constメンバ関数からメンバ変数を書き換えたくなったからといって、いきなりmutableとかconst_cast{\n}<T*>(this)とかしちゃいけないのだ! 呼び出し側はスレッドセーフを期待しているのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! C++で「関数っぽいマクロ」を作ったらダメなのだ! function_traitsで返り値や引数の型を取得できないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! volatile T*へのキャストをどう書く分からないからって、Cキャストを使っちゃいけないのだ! const_castを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! __PRETTY_FUNCTION__ を「かわいい」関数名と訳さないのだ! それは「見た目がきれい」な関数名なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ラムダ式の型をtypeid().name()で取得しようとするのは無駄なのだ! それはコンパイラが一意なものを決めるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 空の構造体がたくさんあるからって、typedefで全部まとめて一つにするのはやめるのだ! それらはBoost.MultiIndexのタグなのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! boost::anyオブジェクトにchar*型の値を入れたとき、 boost::any_cast<const char *> で取り出すのはやめるのだ! boost::bad_any_cast の危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! そのboost::regexをstd::regexに置き換えるのはやめるのだ! std::regexは再帰正規表現をまだサポートしていないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! タイピングが大変だからって、using namespace std って書いちゃいけないのだ! C++17でstd::anyとstd::optionalがきたら名前がかぶるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! f(uint8_t)とf(BYTE)とf(unsigned char)を同時には定義できないのだ! 関数を再定義してますと言われてしまうのだ! プログラマには違う型に見えてもコンパイラには区別がつかないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数の動作を #ifdef COLOR ～ #endif で切り替えると、COLOURと打ったときに～が除外されてしまうのだ! if (定数式)ならコンパイラが綴りの違いを見つけてくれるのだ! #やめるのだフェネックで学ぶC++
あなた、動的型付けあんまり好きじゃないけものなんだね! #けものフレンズ
あなたこそ、Tracing GCとリフレクションのないフレンズ? めずらしーね! #けものフレンズ
やめるのだフェネック! 配列の要素数を #define arraySizeof(a) (sizeof(a)/sizeof(a[0])) で数えるのはやめるのだ! aにポインタを渡すと、変な値が返ってくるのだ! テンプレートを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コンテナの要素の型をソースコードにべた書きしたら、型を変えた時に修正が大変なのだ! std::vector::value_typeとautoとdecltypeを使うのだ!  #やめるのだフェネックで学ぶC++
やめるのだフェネック! コードにstd::cinを直書きしてはいけないのだ! ユニットテストでキー入力するのは大変なのだ! テストケースではistringstreamを作って、std::istreamへの参照を渡すのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 短絡評価の||を「または」と読むのは嫌なのだ! 「さもなくば」と読んで欲しいのだ! &&は「だったら」「なので」と読むのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! メンバ変数名の目印のアンダースコアは、名前の先頭につけちゃいけないのだ! _で始まり次が英大文字の名前はC++処理系の予約語なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ユニットテストが書きにくいからって、#defineでprivateをpublicに置き換えちゃいけないのだ! アクセス指定子を超えたメンバ変数の順序は入れ替わることがあるのだ! friendを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 何もしないデストラクタを{}と定義するのは嫌なのだ! =defaultを使うのだ! 理由はEffective Modern C++ 項目17に書いてあるのだ! #やめるのだフェネックで学ぶC++
C++のテンプレート周りで数百行のエラーメッセージを見たときの感想「え? かばんちゃん、急に何言い出すの」。私のコードのどこが悪いのか全く見当がつかないことがある。 #けものフレンズ
やめるのだフェネック! 出力ファイルストリームのcloseを、いつでもデストラクタ任せにすると、noexceptだからcloseで書き出しに失敗したことを検出できないのだ! ファイルの保存に失敗したことは知りたいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! strict aliasing rule警告の意味が分からないからって無視してはいけないのだ! 正しく直すのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! pragmaで警告を抑止してよいのは、コードレビューで承認されてからなのだ! -Wall -Werror は必須なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 立っているビット数をfor文で数えるのは遅いのだ! 畳み込み演算を自作する前に、コンパイラのマニュアルから __builtin_popcount* とかを探すのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! thisと引数が同じオブジェクトかどうか(二つの引数が同じオブジェクトかどうか)確かめずに、片方から他方にメンバをコピーするのは危ないのだ! memcpyのように要素が消失することがあるのだ! #やめるのだフェネックで学ぶC++
Register renamingとは、「そのレジスタのデータはこれ以上使わないのです。おかわりをよこすのです。」 #けものフレンズ
やめるのだフェネック! 確かにC99の機能はC++でも使えることがあるが、restrictはコンパイルエラーになることがあるのだ! 本当にrestrictが必要か考えるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! memsetを使ってbyte単位以外の値でメモリを埋めるのは無理なのだ! std::fillを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 非PODのオブジェクトをmemcpyしてはいけないのだ! vtableへのポインタもコピーされてしまうのだ! 派生クラスのメンバが切り捨てられて不定値に置き換わってしまうのだ! #やめるのだフェネックで学ぶC++
ライブラリを活用するのです。普通のプログラマが再発明したものより、理解容易性や信頼性や性能がはるかにすぐれているのです。美味しいものを食べてこその人生なのです。 #けものフレンズ
やめるのだフェネック! マクロに複数の文を入れるときは、do { ... } while(0) で囲むのだ! そうしないと、if文の直後でそのマクロを使ったときに、予想外の動作をすることがあるのだ! #けものフレンズ #やめるのだフェネックで学ぶC++
やめるのだフェネック! コメントに「この変数は符号なしのはず」とか書いて済ませてはいけないのだ! static_assert(std::is_unsigned)を書くのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! do { ... } while(--i >= 0) は、iが符号なし整数だと永久に終わらないのだ! プロセスの危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! unionを使ってstructをuint8_t[]に読み替えるのは、実行時にはできても、constexprでコンパイル時にできるとは限らないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ビットフィールドを上から下に並べても、MSBから順に並ぶとは限らないのだ! エンディアンとコンパイラの仕様を確認するのだ! IPv4ヘッダの構造体をみて欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 同じx86 CPUだからって、64ビットアプリと32ビットアプリで、浮動小数が同じ計算結果を返すと仮定してはだめなのだ! SSEは内部64ビットだが、x87は内部80ビットで計算しているのだ! #やめるのだフェネックで学ぶC++
何かがランダムに発生するなら粗密があるのです。等間隔ならランダムとは言わないのです(対偶)。よってしばしば待たされるのは当然なのです。
やめるのだフェネック! sizeofにリテラルを渡すのはやめるのだ! sizeof('a')はCとC++で違うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! sizeofに型名を入れてはいけないのだ! 変数の型が変わった時オーバランするのだ! sizeof(*pObject)とすれば、ポインタpObjectが指すもののサイズが得られるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! size_tのビット数が分からないからといって、printfの書式指定に%luと書くのは嫌なのだ! %zuと書くのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 固定アドレスの格納先を、uint32_tとかuint64_tとか書くのは嫌なのだ! そこはuintptr_tを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 配列をループで回すときのインデックスを何でもintにしてはいけないのだ! sizeof(size_t) > sizeof(int)だと4Gあたりで動作がおかしくなることがあるのだ! #やめるのだフェネックで学ぶC++
べき乗則の代表例として、地震の規模-頻度、株価の変動率-頻度があります。さてソフトウェアの修正コストは、開発フェーズを経るごとに倍々に増えると言います。もしソフトウェアの修正コスト-頻度がべき乗則だったら、いつ出荷できるかの予想はかなり困難ではないでしょうか。
やめるのだフェネック! int64_t v = 1 << 32; はint64_tではなくintをシフトしているのだ! 0x100000000ではなく0が入るかもしれないのだ! int64_tの変数に代入してから<<=でシフトするのだ! #やめるのだフェネックで学ぶC++
"NG"の正しい使い方として、Boeing 737 Next Generation (737NG)があります。ですので日本語におけるNGの正しい使い方は、アイドルマスターシンデレラガールズのニュージェネレーションズ(new generations)の略称ということになります。
やめるのだフェネック! x64 ABIで、asmコードからCの関数を呼び出すときは、rspレジスタを16 bytes境界に合わせないといけないのだ! そうしないと、C++ライブラリの中で突然異常終了することがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! XMMレジスタの値を、素のuint64_t[]に保存してはいけないのだ! 16 bytes アライメントが必要なのだ! 単にreinterpret_castするだけじゃダメなのだ! #やめるのだフェネックで学ぶC++
エンディアンの違いは確かに厄介ですが、社会にも統一されないことはあるのです。株価が上がったときの色は、日経が赤でロイターが緑、下がった時はそれぞれ逆(緑と赤)なのです。遠目には株価が上がったのか下がったのか分からないのです。
やめるのだフェネック! enumを何でもintにキャストしてはいけないのだ! std::underlying_typeを使うのだ! intで収まらないことだってあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! .sファイルのアセンブリマクロをテストできないと諦めないのだ! 単にマクロを展開して、C++のインラインアセンブリからcallすればテストできるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! /* Local Variables: c-file-style: "stroustrup" */ を理解できないからって消さないで欲しいのだ! それはEmacs上でソースコードを整形するのに必要なのだ!  #やめるのだフェネックで学ぶC++
Null object pattern は、if (pointer) を省いて見通しをよくするパターンなんだね! /dev/null のフレンズなんだね!
やめるのだフェネック! スレッドセーフと再入可能は違うのだ! 複数のスレッドからmallocは呼べるかもしれないが、割り込みハンドラからmallocは呼べないのだ! ヒープ構造の危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 負の整数を2で割るのに、算術右シフト一回だけでは済まないのだ! -1を2で割っても-1になってしまうのだ! コンパイラがどんなコードを出力するか確認するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! x86でNOP命令を「何クロックか待つ」ためには使えないのだ! Z80とは違うのだ! NOPは命令をアラインメントするために使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 日付を甘くみてはいけないのだ! イギリスで2017年10月29日は夏時間から冬時間に切り替わる日なので、午前一時半が二度あるのだ!
boost::optional は、返り値が得られないことを例外なしで教えてくれるフレンズなんだね
やめるのだフェネック! 年齢不詳のときに、0歳を返すのは論外だが、だからって-1歳を返さないで欲しいのだ! boost::optional に入れて欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! インラインアセンブリのシフト命令でCLレジスタを使ったら、破壊レジスタに書かないとダメなのだ! RCXレジスタに第一引数のポインタが入っていると、Segmentation faultの危機なのだ! #やめるのだフェネックで学ぶC++
Macro Fusionとは、「我々がInstructions Per Clockを満足できるまで頑張るのです」 #けものフレンズ
やめるのだフェネック! 「どんな型の関数へのポインタでも入る物」として、void*を使うのはやめるのだ! データへのポインタとコードへのポインタは互換ではないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数への参照は、&をつけるのとつけないのと使い分けるのだ! テンプレートマッチングに失敗することがあるのだ! #やめるのだフェネックで学ぶC++
新しく物を買ったばかりなのに傷がついた、とがっかりすることがあります。しかし指数分布の下で何かが初めて起きる確率はλe^-(λt)、つまりt=0のときが最大なので、よく考えたら当たり前のことでした。
やめるのだフェネック! メンバ変数を増やしたとき、複数あるコンストラクタすべてに、そのメンバ変数の初期化を加えるのを忘れちゃ嫌なのだ! 予防とDRYを兼ねて、メンバ変数の定義に初期化を置くのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! テンプレートマッチングをstd::is_pointerだけで済ましてはいけないのだ! 配列T(&)[SIZE]とstd::is_null_pointerに対するマッチングも必要なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数の返り値型をautoにしたら、return vec[i]でベクタの要素への参照は返せないのだ! 要素のコピーが値渡しされるのだ! そこはdecltype(auto)が必要なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 返り値がdecltype(auto)のときにreturn (v);すると、ローカル変数vへの参照を返すのだ! 括弧が余計なのだ! 未定義動作の危機なのだ! #やめるのだフェネックで学ぶC++
フェネックやめるのだ! thread_localを使う前によく考えるのだ! 特定のスレッドしか参照しない値は、スレッド起動時の引数で渡して参照できるのだ! アライさんはその辺ばっちりなのだ! #けものフレンズ #やめるのだフェネック
やめるのだフェネック! そこはvolatileではなくstd::atomicが必要なのだ! 競合動作の危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! そこはvolatileをつけないと、最適化されてメモリとレジスタに書きにいかないのだ! デバッグビルドでは動作してもリリースビルドでは正しく動かないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 引数としてconst T* pを渡すと、ポインタpが指すオブジェクトはimmutableとして扱われるが、deleteはできるのだ! deleteされたくなければ、デストラクタを非publicにするのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! #if (sizeof(uintptr_t) > 4) とは書けないのだ! if constexpr (sizeof(uintptr_t) > 4)が使えるようになるのを待つのだ! #やめるのだフェネックで学ぶC++
Hyper-Threadingとは、「パイプライン資源の狩りごっこだね! 負けないんだから!」 #けものフレンズ
やめるのだフェネック! __builtin_popcountの引数はunsigned intなのだ! long long intを渡すときは__builtin_popcountllなのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! __attribute__((always_inline)) は常にインライン展開できるとは限らないのだ! 再帰呼び出しはインライン展開できないのだ! そもそもinlineはヒントであって命令ではないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! .cppから.dファイルを作るときに、自動生成する予定のファイルが見つからない、とエラーが出るのは困るのだ! -MGオプションが必要なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! .hppからモックなどを作るときに、自動生成する予定のファイルがインクルードできないのは困るのだ! インクルード可否をMakefileから注入して欲しいのだ! __has_includeはまだ早いのだ! #やめるのだフェネックで学ぶC++
仕事における住み分けの一つの方法は差別化ですが、もう一つは比較優位です。要するに、医師が受付業務をできるからといって、実際にはそうはしないということです。プログラマが雑用を押し付けられたら、比較優位を使って説明すると、ソフトウェア開発に専念できるかもしれません。
やめるのだフェネック! std::wstring_convertによるUTF-8/16変換は、ちゃんと例外を捕捉するのだ! わざと冗長にUTF-8エンコードした文字列を入力すると、std::range_errorが飛ぶことがあるのだ! #やめるのだフェネックで学ぶC++
Boost MPL (Metaprogramming Library)? フレンズの技だよ! #けものフレンズ
やめるのだフェネック! ポインタの差を、intに入れるのは嫌なのだ! ptrdiff_tを使うのだ! 符号ありだから、printf書式は"%td"を使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! snprintf(dst,N,"%s")でdstにN文字ちょうど書き込もうとすると最後はNUL終端されるが、strncpy(dst,,N)のときはdstがNUL終端されないのだ! バッファオーバランの危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コメントに「このクラスのインスタンスはヒープに置かないでください」と書いて済ますのは嫌なのだ! operator newを=deleteして欲しいのだ! プログラマを誤用から守るのもライブラリの役割なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! グローバル変数のコンストラクタから、別のグローバル変数のインスタンス関数を安易に呼び出してはいけないのだ! グローバル変数の初期化順序はコンパイラが決めるから、呼び出し先は未初期化かもしれないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! static T& GetInstance(void) { static T i; return i; } はマルチスレッド下ではシングルトンにならないことがあるのだ! シングルトンの実装方法を確認するのだ! #やめるのだフェネックで学ぶC++
C++14では、整数の桁区切り記号として、'を使えるようになりました。C++14以前との互換性を考慮して選ばれた記号ですが、スイスでは似たような記号(U+2396)で桁を区切るので、実社会と無縁でもないのです。
やめるのだフェネック! VLAがスタックに置かれるとは限らないのだ! ヒープに確保するコンパイラ(ARM Compiler)もあるのだ! 割り込みハンドラからmallocは呼べないことを思い出して欲しいのだ! #やめるのだフェネックで学ぶC++
今どきメールと言えば電子メールなので、郵送のメールはsnail mailと呼ぶようになりました。私はロンドンから日本にハガキを送ったのですが、air mailと書き忘れたためにsurface mailになり、到着まで数十日掛かりました。本当にカタツムリのように遅かったです。
やめるのだフェネック! クラスにoffsetofを取ると警告が出るのだ! Non standard layout型に対してoffsetofを取る意味があるのかよく考えるのだ! #やめるのだフェネックで学ぶC++
国鉄時代のダイヤグラム作成は、温泉旅館で全国規模の会議を開いていたそうです(富井規雄著 "鉄道ダイヤのつくりかた" オーム社)。ソフトウェアの上流設計も、温泉旅館に館詰にして行った方が、作業に割り込みがないので、いいものができるのではないでしょうか。
やめるのだフェネック! 単に速い処理をリアルタイムと呼んじゃ嫌なのだ! リアルタイムシステムとは、結果の正しさが内容だけでなく、締め切りに間に合ったかどうかにも依存するシステムなのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 割り込みハンドラで自動変数のオブジェクトを生成するとき、コンストラクタがnewするのは困るのだ! メンバ変数と他のメンバ関数についても確認するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 組み込み32bit CPU向けコードのテストをGoogle Testで書くのに、x86_64コンパイラは要らないのだ! size_tの違いを吸収するのは大変なのだ! target=i686でインストールするのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! volatile int value = *p; はpの指すものがvolatileではなく、valueがvolatileなのだ! pの指すものが更新されても、valueは連動して更新されないのだ! #やめるのだフェネックで学ぶC++
「やはり俺の青春ラブコメはまちがっている。」は「はまち」と略すらしいですが、catコマンドはconcatenateの略なので、古今東西考えることは同じだと思いました。
やめるのだフェネック! コンパイラの警告を無視した箇所を、静的解析ツールに指摘されるのはやめるのだ! コンパイラが数秒で教えてくれることを、翌朝に教わるのは開発効率が低すぎるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 「みんながインクルードしているヘッダファイルの定義を書き足したらフルビルド」を避けるのだ! 宣言と定義を分離するのだ! enum classの前方宣言を活用するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! std::atomic<int>は明示的に初期化する必要があるのだ! 初期化を忘れてもコンパイラは教えてくれないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! autoは便利だが万能ではないのだ! std::atomic<int> aから値を取り出すのに、auto v=aとは書けないのだ! atomicをコピーしようとして失敗するのだ! 型かload()が必要なのだ! #やめるのだフェネックで学ぶC++
アムダールの法則を実社会に当てはめると、会議ばかりしているプロジェクトに人を投入すると、会議に出る人数が増えるだけなので、プロジェクトの加速には寄与しない、という意味だと思います。
@jkgf_bot さん、Intel 64 and IA-32 Architectures Software Developer Manuals は4700ページあるので、持ち上げることすらできません...{\n}https://twitter.com/jkgf_bot/status/825161772365541376
やめるのだフェネック! 配列の要素を0から数えるのは、C言語が初めてじゃないのだ! イギリスやフランスでは、日本やアメリカの1階が0階(ground floor)なのだ! エレベーターに0とかGとか表示するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コレクションの先頭要素が0か1か区別して欲しいのだ! 0時はあっても、0日や0月や平成0年はないのだ! #やめるのだフェネックで学ぶC++
コノハ博士なら「ちょまぎょは... 魚ではなく、あざらしです」と分かると思います。
やめるのだフェネック! オブジェクト指向を「もの指向」と呼ぶのは嫌なのだ! 「目的語指向」と呼んで欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! キーボードについている#はシャープじゃないのだ! Poundとかhashとかnumberとか読んで欲しいのだ! シャープはU+266Fという別の文字なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数名のtoを2と書いたり、forを4と書いたりするのはやめるのだ! コーディング規約は守ってほしいのだ! ソースコードをgrepする人のことも考えて欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ソースコードのファイルの最後は改行で終わって欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! "the dinosaur book"は恐竜のフレンズ図鑑じゃないのだ! "Operating System Concepts"の通称なのだ! #けものフレンズ #やめるのだフェネックで学ぶC++
Rose-crowned fruit dove (Ptili‐nopus regina)は、Effective Modern C++が得意なフレンズなんだね #けものフレンズ #やめるのだフェネックで学ぶC++
やめるのだフェネック! /usr/binのgccが古いと、新しいLLVMをビルドできないのだ! LLVM 4.0.0にはGCC4.8以降が必要なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! /usr/binのツールが古かったり、/usr/libのライブラリが足りなかったりすると、新しいGCCをビルドできないのだ! 服を買いに行く服がないのは困るのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! LLVMをビルドするのに、もうconfigureは使えないのだ! cmakeの使い方を覚えるのだ! #やめるのだフェネックで学ぶC++
割り込み/シグナルハンドラから再入可能でない関数を呼び出してしまっている、というのは静的解析ツールに見つけて欲しいのですが、現状どれだけの精度で検出できるのでしょうか。少なくともPOSIX.1は、再入可能なものが限定されていますし。
もう一歩踏み込むと、マルチスレッドまたは割り込み/シグナルに対して競合が発生する処理一般を静的解析ツールに見つけて欲しいのですが、こうなると形式検証レベルのものが必要になるので、実用化するのは簡単ではないですよね。
やめるのだフェネック! シーケンス図で複合フラグメントを駆使して、いろんな状態を一つの図にまとめるのはやめるのだ! 状態遷移図とアクションを使えばすっきり描けるかもしれないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! クラス図のメンバにintとかstringとか書かないで欲しいのだ! ～というデータという抽象を保ってほしいのだ! intやstringで実装するかどうかは後で決めればよいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! UML図の各要素の名前は、統一性のあるきちんとした英語でつけて欲しいのだ! 統一性のない用語や、間違った英単語を使うと、それがそのままコードになってしまうのだ! コーディングを始めてから語彙を統一するのは無理なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 非同期処理をシーケンス図で表現するのは大変なのだ! アクティビティ図を使って並行性を表現して欲しいのだ! #やめるのだフェネックで学ぶC++
もしみんなが秘書問題(the secretary problem)を使って、夜店に行ったときどの屋台で食べるかを選んだら、入口にあるお店は集客が大変なのだ!
セマフォ(semaphore)は鉄道由来の用語だから、mutexの可視化なら、高知の路面電車(とさでん交通伊野線)でタブレット交換をみるのだ!
やめるのだフェネック! Googleの看板"{first 10-digit prime found in consecutive digits of e}.com"を解くのに、エラトステネスの篩を自作するのはイケてないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! そこにconstをつけると、テンプレート周りで770行のエラーメッセージが出るのだ! #やめるのだフェネックで学ぶC++
スペースを表す文字はUnicodeに17種類もあるということを、くいなちゃんが教えてくれたのですが、Boost.Regexで\sやPOSIX文字クラスの空白[:space:]を使うとだいたい見つけてくれるようです。MinGWとCygwinで結果が一致しないのですが。
やめるのだフェネック! よく知られたアルゴリズムをそのまま使うときは出典を明記して欲しいのだ! そのコードがXorshiftだということは、保守する人には分からないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! T時間当たり1回起きる不具合を、T時間起きなかったといって、直ったと断言するのはやめるのだ! T時間経っても起きない確率は{1/自然定数の底=37%}あるのだ! #やめるのだフェネックで学ぶC++
テンプレートメタプログラミングは「Haskellてき」だと思うのです。似たような関数は、いくつかヘッダファイルで目撃されているのです。まずはそれを探すのです。ちゃんと引数が適用可能かどうか、よくみるのですよ。 #けものフレンズ
やめるのだフェネック! ヘッダファイルを追加したのに、add-commitし忘れて帰っちゃ嫌なのだ! レポジトリをチェックアウトした他の人に、コンパイルエラーの危機が訪れるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! #include文のファイル名は、大文字と小文字を間違えちゃ嫌なのだ! Windowsでは問題なくても、Linuxではファイルがインクルードできないと言われてしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! #include "../detail/foo.h"と、横断するパスを書かないで欲しいのだ! それは実装部のヘッダだから他モジュールには公開しないのだ! インクルードパスはヘッダファイルの公開範囲を規定しているのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! メールクライアントにメールが届いたときに、ポップアップを出してはいけないのだ! プレゼンテーションの最中に届いたメールがさらされて恥ずかしいことになるのだ! #やめるのだフェネックで学ぶIT事故シリーズ
やめるのだフェネック! そのエラーメッセージ"has incomplete type T"は、T型が不完全型だと言ってる訳じゃないのだ! インクルードしているヘッダファイルが足りないから、T型の定義が見つからなくて困ると言っているのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 公開するヘッダファイルに、実装にだけ必要な宣言や定義も書いて「全部入り」にしちゃいけないのだ! 他のプログラマがドキュメントに無い「隠し機能」だと思って使ってしまうのだ! 保守の危機なのだ! #やめるのだフェネックで学ぶC++
プログラマの三大美徳は、怠惰(ライオン)、短気(アライグマ)、傲慢(アフリカオオコノハズク)なのだ! 誤解のないように言っておくが、これらは褒め言葉なのだ! #けものフレンズ
やめるのだフェネック! パラメータをちょっといじりたいからって、.cppの定数を手で書き換えるのはイケてないのだ。一貫性の無いパラメータが設定されて事故の元なのだ! 設定ファイルからRubyで.hを自動生成してインクルードするのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! boost::fusion::vectorの番号付き(vectorN)は、C++11で廃止になるのだ! C++03では型引数が同じでも、番号付きと番号なしでは違う型だから注意が必要なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 変数名をtimeと書いて時間と読ませるのは、点(時刻)なのか幅(狭義の時間)なのか分からないのだ! timestampかdurationと書いてほしいのだ! #やめるのだフェネックで学ぶC++
クラステンプレートのインスタンスを作るfactoryメソッドに、いちいち型引数<T>を書きたくないって? 自由関数テンプレートにすれば、型引数を省略してもコンパイラが推論するのだ! 楽をするためにはどんな苦労も厭わないのがプログラマなのだ!
プログラミングに熱中していると、食べるのがめんどくさいことってありませんか? われわれはジャパリまんのような、調理せずに食べられる完全食が欲しいのです。われわれはかしこいので。 #けものフレンズ
仕事中のプログラマが、ハシビロコウみたく目つきが鋭くて近づき難いのは、そっとしてあげて欲しいのです。じっと動かないのは、複雑なマルチスレッド処理を考えているところなのです。 #けものフレンズ
やめるのだフェネック! 参照とポインタは「どっちも間接アドレッシング」ではないのだ。ポインタはnullable(optional)とかiteratorとか、もっと多義的なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数定義をヘッダに移したら動かなくなったとか言っちゃダメなのだ! 定義がみえる関数呼び出しをまたぐ最適化が適用されたから、volatileでない変数を読みに行かなくなったのだ! volatileをつけるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! do {...} while(0)はループ実行のオーバヘッドが掛かるから無駄とか言っちゃいけないのだ! 今どきのコンパイラは最適化でこのループを取り除くのだ! アセンブリコードを出力して確認するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数内で異常が発生したから、それまで確保したメモリやファイルハンドルを解放する処理を、gotoで関数の最後に飛んで行うのはやめるのだ! Cではそれでよいが、C++ではRAIIを使わないと例外安全にならないのだ! #やめるのだフェネックで学ぶC++
プログラマにとってのHEXは16進数ですが、ロンドンに飛行機で着いてから乗るHEXはHeathrow Expressです。線路脇に100と書かれた標識があったような気がしますが、単位はmphなので160Km/hです。偶然ですが16進数っぽいですね。
やめるのだフェネック! free(p);をif(p){}で囲む必要はないのだ! freeにNULLを渡しても無害なのだ! こういうインタフェースはnull object patternにして欲しいのだ! アライさんはその辺ばっちりなのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! たとえ英語が嫌いでも、プログラマに英語は必要なのだ! 英語が読み書きできて、語彙が十分でないと、stackoverflow.com で解決策を調べられないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 任意精度実数の「任意」に相当する形容詞は、anyではないのだ! arbitraryなのだ! 単語を間違えると、検索で引っかからないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 実行時に任意の正規表現を入力として受け取るのはやめるのだ! 複雑な正規表現を食わされて落ちる(ReDoS)ことがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 2/3/2017は二月三日だか三月二日だか分からないのだ! Feb. 3, 2017と表示して欲しいのだ! それと、JuneとJulyは略さなくてよいのだ! #やめるのだフェネックで学ぶC++
0/1-basedといえば、午前12時と午後12時がいつか分からなくなるのですが、分かりやすい覚え方はないでしょうか? 00分ちょうどなら正午(noon)、midnightと書けば済むのですが...
やめるのだフェネック! 関数や型がどこで定義されているかを、いちいちgrepで調べるのは嫌なのだ! etagsでTAGSを作って、emacsからタグジャンプすればよいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 自分で理解できないイディオムを、可読性が低いといちゃもんをつけないで欲しいのだ! 使っている人が理由を正しく説明できるなら、これを機にメンバで知識を共有すればよいのだ!  #やめるのだフェネックで学ぶC++
わざと不具合が混入した疑似コードを渡されて問題点を指摘する、という練習問題の攻略法は、非機能です。計算量が多すぎる、保守フェーズで一貫性のある変更が大変、あるコンパイラではたまたま動くが移植すると動かない、などは出題者が気づいていないかもしれません。
やめるのだフェネック! 引数の"size"が、個数なのかbyte単位のサイズなのかword単位のサイズなのか分からないのは困るのだ! 区別できるような名前をつけて欲しいのだ! そもそも1 wordって何byteか分からないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 固定長配列同士のmemmove/memcmpは、サイズが合っているかどうかstatic_assertを書いて欲しいのだ! 配列のsizeofは配列全体のbyte単位サイズを返してくれるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 問題を"problem"と報告したら、相手に「お前のせいで困っている」と言っているようで怒らせてしまうのだ! 取り組むべき課題は"issue"と訳すのだ! #やめるのだフェネックで学ぶC++
チップのピン配置にI行がないのは1列と混同するのを避けるためだと思われます。さてワシントンDCの通りも南北が番号、東西が文字ですが、J streetはありません。理由は諸説ありますが、昔はIとJが分かれていなかったかららしいです。BVLGARIも同様ですね。
やめるのだフェネック! シンボル名やコメントを一括置換するときは、置換元を狭く限定して、過剰に置換していないかちゃんと確認するのだ! バをヴァに置き換えるだけだと、カヴァンになってしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! シンボル名を短くしたいからって、変な略語を発明しないで欲しいのだ! Cではないのだから、シンボルを31文字以内に収める必要はないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 手元の開発作業とGitHubへのリリース作業の両方の画面を開くと、どれがどれだか分からなくなるのだ! VirtuaWinとか使って作業画面を分けるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 長さNの配列を、for(int i=0; i<N; ++i)で回すのはやめるのだ! 配列の長さを増やしたとき、for文を変え忘れるのだ! インデックスiが必要なら、Nをsize()かconstexpr式とかで調べるのだ! #やめるのだフェネックで学ぶC++
GitHubのpull requestがpush requestでないのは、「部屋に入ってもいいですか」が"May I come in?"だと考えれば分かるのです。
やめるのだフェネック! std::vector<T>.data()で得られるポインタは、ベクタの要素を増減すると無効になることがあるのだ! 関数の返り値にするなんてもってのほかなのだ! Segmentation faultの危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 時間には単位を書いてほしいのだ! usがμ秒だということはなんとなく分かるのだが、usecと書かないと我々とか米国と読めてしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! extern "C"はC「リンケージ」を指定しているのであって、C言語としてコンパイルしろとは言っていないのだ! CとC++の両方でコンパイルされるヘッダファイルなら、両方で通用するコードを書く必要があるのだ! #やめるのだフェネックで学ぶC++
全/半二重通信はあまり聞かなくなりましたが、鉄道の世界では全二重の容量は半二重の二倍ではないのです。単線の容量は閉塞区間を往復する時間で決まりますが、複線の容量は続行運転の間隔で決まるので二倍よりはるかに多いのです。量の違いが質の違いを生むのです。
やめるのだフェネック! Embedded systemを「埋め込み」システムと訳すのは嫌なのだ! 組み込みシステムと訳して欲しいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! VRAMの転送は、copyではなくblit(bitblt)の方が適切ならそう書いて欲しいのだ! #やめるのだフェネックで学ぶC++
あるクラスのデストラクタが非仮想なら、そのクラスが継承されるのはたぶんよくないことなのですが、finalクラスと指定すべきなのでしょうか?
やめるのだフェネック! 質が低いドキュメントを書いて「分からないことがあったらなんでも訊いてね」にすると、プログラミングとユニットテストの最中にしょっちゅう割り込まれて作業が進まないのだ! プロジェクトの危機なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 命令の依存関係は、レジスタだけでなくフラグにもあるのだ! INCよりADDを使う理由とか、SHLXをとか調べるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! XOR r,rは単にレジスタrを0にするだけじゃないんだ! レジスタrとフラグの依存関係を絶って、実行効率を改善するためのイディオムなのだ! フラグを変えたくなければMOV r,0にするのだ! #やめるのだフェネックで学ぶC++
プログラマならmockは当然ユニットテストで使うのですが、mockを辞書で引くとあまりいい意味ではないようです。技術用語として使うなら悪くない、というのがプログラマの文化なのでしょう。gitも然りです。
やめるのだフェネック! デバッガ上で実行していることはバレているのだ! わざとint3を踏んで、SEHでハンドリングしたかどうか確認しているのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コンパイラの最適化を甘く見てはいけないのだ! Tail recursionをiterationにできるなら、tail callもjmpにできるのだ! 自作のassemblyよりかしこいのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 複数のファイルを結合したとき、改行コードが行ごとにLFだったりCRLFだったり、まちまちなのは気持ち悪いのだ! Emacsで表示すると^Mが見えてしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! diffコマンドは-uprNオプションをつけて起動して欲しいのだ! Working copyがbranchから一行でもずれたらパッチが当たらないのは困るのだ! git diffに形式をあわせるのだ! #やめるのだフェネックで学ぶC++
"Mademoiselle: Coco Chanel Summer 62"という、マドモアゼル シャネルの仕事風景を写した写真集があります。ひたすら仕事に没頭するその姿は、プログラマの理想的な作業環境でもあると思います。
やめるのだフェネック! 区間演算を自作すると、両端を区間に含めるかどうかで不具合が起きやすいのだ! 素直にBoost.ICLを使うのだ! 計算量のオーダーも低くて済むのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ビットフィールドを設定/取得するのに、マスクしてシフトするのは唯一の方法ではないのだ! 最近のx86はPEXT/PDEP命令が使えるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! インデントとか括弧の字下げとか一行は100文字以内とかいう規則を、プログラマに手作業で守らせるのは無理なのだ! どうしても守らせたければ、IDEやindentにさせるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! シュミレーションはちょっと恥ずかしい誤字なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! classはstructのsyntactic sugarにすぎないのだ! デフォルトの公開範囲が違うだけで、できることに変わりはないのだ! #やめるのだフェネックで学ぶC++
プログラミングと株取引は似ています。サッカーや将棋のようなレベル分けされたリーグはなく、プロとアマチュア、商品、製品とそうでないソフトウェアが全力で勝負している世界です。
プログラミングと株取引は似ています。自分の行動は相手が何をしているか(いくらで売り買いしたいか)で決まり、どうしてか(今すぐ現金が欲しい)は考慮されません。プログラマがデバッグにどれだけ苦労しても、ユーザがそのソフトを使うかどうかには影響しないのです。
プロジェクトのクリティカルパスがどこかは、よく考えないと分からないことがあります。東海道新幹線が開通するためのクリティカルパスは、おそらくは時速200キロで走る列車を開発することではなく、新丹那トンネルを掘ることだったでしょう。
プロジェクトとは独特(unique)で期限があり(temporary)始めてみないと細かいことは分からない(progressive elaboration)と言います。そう思ってデレアニの「シンデレラプロジェクト」を見ると、確かにそうだと納得できるでしょう。 #imas_cg
やめるのだフェネック! switch-caseがいつも多段if-elsifになるとは限らないのだ! clangはcaseが多いときにルックアップテーブルを作ってジャンプするのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数宣言と関数定義の引数名が違うのはまずいのだ! 片方がradiusで他方がdiameterだと、どちらが正しい仕様だか分からないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 32bitレジスタマシンで、64bitリアルタイムクロックを読むのに、単に下位32bit-上位32bitと読むと、時刻が逆転することがあるのだ! 上位bitが一致するまで読み直すのだ! #やめるのだフェネックで学ぶC++
スループットとレイテンシがトレードオフになっている例は、ラッシュ時に急行が走らない、ということです。急行に人が集まり過ぎると乗り降りに時間が掛かりますし、各駅停車を急行から逃がすのは加減速とポイント切り替えに時間が掛かると思われます。
私がアルゴリズムという言葉を知ったのは大学に行ってからですが、最初に出会ったアルゴリズムらしきものは大判時刻表です。列車の乗り換えを決めるのは、目的地の到着時刻を決め打ちして出発地に向かう方が、出発地からたどるよりずっと簡単だ、というのは何という名前のアルゴリズムでしょうか?
やめるのだフェネック! C++とCで共用するヘッダファイルで、構造体の内部構造体名はすべての構造体で一意でなければならないのだ! そうでないとCでは構造体を再定義しましたとエラーになるのだ! そもそも内部構造体をやめれば済むのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ビットフィールドのアラインメントに隙間のビット数を指定したダミーのメンバを加えると、他のメンバのビット数が変わった時にダミーを変え忘れてメンバのレイアウトがずれてしまうのだ! 無名でサイズ0のフィールドを使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! ITS/BTS(Issue/Bug Tracking System)があるのに、タスクを登録せずに何でもかんでもメールで依頼するのはやめるのだ! 依頼内容の途中経過もメンバの負荷も見えなくなってしまうのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! CRC計算を自作する必要はないのだ! Boost CRC Libraryがあるのだ! #やめるのだフェネックで学ぶC++
職場とはfeeling goodというよりdoing goodな場所だと思うのですが、さて一緒に仕事をしている「気の合う同僚」というときの、「気の合う」は、friendly/congenial/gorgeous colleague(s)のどれが適切なのでしょうか?
やめるのだフェネック! 演算子の優先度を覚えるのは無理なのだ! expr ? 2 : 3 + 4;  4 + expr ? 2 : 3;  4 + (expr ? 2 : 3); は違うのだ! 括弧をつけるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 実行ファイルのバイナリサイズを削減するのに、使ってなさそうな関数を探して #if 0 ... #endif を試すのはまわりくどいのだ! LTO(Link Time Optimization)を使うのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! C++98の自作STATIC_ASSERTマクロは、C++11では公式static_assertに置き換えて欲しいのだ! どこでエラーが起きたかは分かっても、なぜ起きたか分かりにくいのだ! #やめるのだフェネックで学ぶC++
年金というと老齢年金を思い浮かべる人が大半だと思いますが、特許の維持費(maintenance fee)のことを特許維持年金と呼ぶようです。年金とは毎年もらうだけでなく、毎年払うときにも使う言葉なのですね。
やめるのだフェネック! ROT13はとても暗号とは呼べないのだ! 一文字の単語がaで三文字の単語がtheなのはバレバレなのだ!
あるとき名古屋に向かっている新幹線が定刻より数分遅れていたのですが、名古屋で快速みえに乗り換える客を、走行中に車掌が11号車に集めていました。名古屋駅で1号車を降りてから階段まで歩く時間を省いて、快速みえが遅れないようにしたようです。レイテンシはこのように隠せるのです。
ビットフィールド構造体の設定を、各メンバを逐次代入するのと構造体まるごとコピーするのとで、生成されるコードに大差ありませんでした。それよりもg++はビットマスクを使って各メンバを設定するが、clang++は全メンバのビットパターンからなる即値を入れるという違いの方が大きいです。
やめるのだフェネック! メンバ変数を一括クリアするのに、memset(this, 0, sizeof(*this))はまずいのだ! vtableへのポインタもクリアしてしまうのだ! #やめるのだフェネックで学ぶC++
センター試験の地理は、初めてみる資料から特徴を抽出して、それを説明する一番確からしい選択肢を選ぶ、という側面があります。これはデバッグ中に、怪しい挙動見つけてバグの原因を推測することに通じるものがあります。プログラミングが好きなら、地理は相性がよいのではないでしょうか。
やめるのだフェネック! 仮想関数呼び出しが常にvtableアクセスを伴うとは限らないのだ! 具象型がコンパイル時に分かるときはそのメンバ関数を直接呼び出すのだ(devirtualization)! #やめるのだフェネックで学ぶC++
ソフトウェア開発の最初の一歩として、旅に出てホテルで館詰になって全体像を考える、というのを過去やってみたのですが、私にはあっているようです。この場合の「かんづめ」は、缶詰ではなく館詰が正しいそうです。もちろん一日頭を使ったら、美味しいものを食べるのです。
やめるのだフェネック! その日はアメリカは祝日なのだ! 一日早くリリースしないと相手は受け取れないのだ!
やめるのだフェネック! 忙しいからといって夏休みを返上してはいけないのだ! 3,4日まとまった時間がないと、新しいことを学習して身につけることはできないのだ! いまどき一からソフトウェアを書くのにC++98はありえないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! -flto オプションはすべてのソースコードのコンパイルとリンカにつけるのだ! -fltoをつけたりつけなかったりすると、リンクエラーになることがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! vtableを実行時に書き換えて「オープンクラス」みたいにはできないのだ! vtableはread-onlyセクションに置かれているのだ! 書き換えようとするとSegmentation faultで落ちてしまうのだ! #やめるのだフェネックで学ぶC++
プログラミングに数学は必要ですか、という質問には競プロの方々が答えてくれると思いますが、個人的には大学初等レベルまでの化学が役に立っています。100種類の元素の無限の組み合わせはアセンブリ言語のようなもので、化学の諸法則はデザインパターンに似ていると思いませんか?
くいなちゃんにはぜひ、「ワタシハKuinチョットデキル」Tシャツを着て欲しいです。
やめるのだフェネック! 関数へのポインタにnullptrは確かに使えるが、できれば何もしない関数を設定して欲しいのだ! NULL検査はわずらわしいし忘れやすいのだ! #やめるのだフェネックで学ぶC++
SFINAEとは、「へーき、へーき! テンプレートによってマッチングできる型違うから!」 #けものフレンズ
すごーい! boost::io::ios_flags_saver は入出力ストリームの設定を後で戻すフレンズなんだね
+演算子はオブジェクトを加算できるフレンズなんだね
やめるのだフェネック! #defineで再帰呼び出しはできないのだ! テンプレートメタプログラミングを使うのだ! #やめるのだフェネックで学ぶC++
CRTPは静的ポリモーフィズムを実現するフレンズなんだね!
すごーい! Boost Serializationはenumをキャストなしで読み書きできるフレンズなんだね
やめるのだフェネック! メンバ関数にYieldという名前は使えないのだ! winbase.hでYieldを「何もしない」マクロと定義しているのだ! 理解不能なエラーメッセージの危機なのだ! #やめるのだフェネックで学ぶC++
すごーい! NVI idiom は、公開インタフェースのmutexを基底クラスで一元的に行って、派生クラスでmutexし忘れるのを防いでくれるんだね!
std::swapは例外を投げずに変数を交換できるフレンズなんだね。おもしろーい!
std::ios_base::ate は「食べた」ではなく、at endの略です。食べないでくださーい! #けものフレンズ
TCPで受信ポートを開いて受信した文字列を表示する、というプログラミングの練習で、動作確認にクライアントが必要なので何にしようかと思いましたが、Webブラウザから、http://localhost:port/ にアクセスするのが一番簡単だと気がつきました。
やめるのだフェネック! デバッグprintfを#ifdef - #endifすると、うっかりリリースビルドで消し忘れて変なコンソール出力が出てしまうのだ! プロジェクト規定のDEBUG_PRINTFマクロを使って、デバッグ時だけ出力するのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! コンストラクタでm_(m_)としているのは、メンバ変数をメンバ変数で初期化しているから、初期化していないのと同じなのだ! m_がstd::vectorへの参照だと、コンパイラは教えてくれないことがあるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! Google Testの結果を取り出せるのは、テストが完走したときだけなのだ! 途中でsegmentation faultで落ちたときは、出力が途中で切れているのだ! Exit statusを確認するのだ! #やめるのだフェネックで学ぶC++
随分前ですが「それは象と鯨とどっちが強いか比べるようなもんだ」と言われたことがあります。例えば、忙しいときにIDEやテキストエディタの優劣について話し掛けられたら、こう言ってさっさと仕事に戻るのがよろしいかと思います。
やめるのだフェネック! x86で、intを一度に32ビット以上シフトするのはやめるのだ! REX.Wがないときのシフト回数は有効桁数が5ビットしかないのだ! そもそもC++でNビット整数を一度にNビット以上シフトした結果は未定義なのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 実行環境を確認せずに、いきなりnoexceptと書かないで欲しいのだ! 例外中立にして欲しいのだ! pthreadGCE2.dllのpthread_exitは例外を投げるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 配列や構造体はどんなに大きくしてもいいという訳ではないのだ! ARMコンパイラは4GBまでできても、MinGW-32bit GCCは0x7fffffffBより大きくできないのだ! ユニットテストの妨げになるのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 関数名を付けるときは辞書をひいて欲しいのだ! 間違った英単語も困るが、ローマ字はもっと困るのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! アセンブリの細かい処理を高速化するときは、何マイクロ秒経ったかだけでなく、何クロック掛かったも測るのだ! 今どきのCPUは可変クロック周波数なのだ! #やめるのだフェネックで学ぶC++
今のx64プロセッサは内部48bitでアドレスを扱っているようですが、SIZE_MAXは2^64-1と定義されています。コンパイル時定数なのは、アドレスが49bit以上有効なプロセッサが将来出るのを期待してのことでしょうが、何か釈然としないのは私だけでしょうか。
やめるのだフェネック! トイレットペーパーが2ロールセットされているのを、両方少しずつ使っちゃ嫌なのだ! 両方同時に無くなったら危機なのだ! ダブルバッファリングを思い出すのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! 浮動小数をprintf("%.0e")して7文字(-1e-308)で収まると、決め打ちするのはやめるのだ! -infinityと表示するときは9文字なのだ! #やめるのだフェネックで学ぶC++
計算量的安全性を持つ暗号とは、暗号を破る膨大なPCを運用するお金があれば、美味しい物が食べられるので暗号を解く気が失せるということですね。もちろん数学的好奇心は、お腹が膨れることより大事だという人はいますが。
やめるのだフェネック! テストの成功をOKと書くのはよいが、失敗をNGと報告しないで欲しいのだ! Failedと書かないと通じないのだ! #やめるのだフェネックで学ぶC++
やめるのだフェネック! if constexprはコンパイル可能でなければならないのだ! PEXCEPTION_POINTERS->ContextRecord->{Rip|Eip} はコンパイルエラーを避けるために#ifdefにするのだ! #やめるのだフェネックで学ぶC++
Rubyのtipsをつぶやくbotはきっとどなたが作って下さると思っています。ところでRubyスクリプトをユニットテストするとき、オープンクラスを使ってテスト対象のクラスの振る舞いを望み通り変えると、テストが書きやすいです。これはC++では簡単にはできないことですね。
動物とプログラミング言語の両方に詳しい方が、「もしプログラミング言語がフレンズだったら」という擬人化ネタを作るのでは、と期待しております #けものフレンズ
「野生解放」とは、C++で高速化に行き詰ったので、AVX命令とBMI(Bit Manipulation Instructions)を使ってさらなる高速化を図ること #けものフレンズ
ヒープに置けないオブジェクトの例としては、RAIIを使った割り込み禁止/許可があると思います。解放忘れ=許可し忘れはまずいでしょうし、メンバ用のメモリを確保する必要はありませんので、自動変数にしてブロックスコープと割り込み禁止区間を一致させるのがよいでしょう。
